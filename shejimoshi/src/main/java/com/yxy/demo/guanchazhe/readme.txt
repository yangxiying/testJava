观察者模式：
对象间一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。


给你举个栗子：假设有三个人，小美（女，22），小王和小李。小美很漂亮，小王和小李是两个程序猿，时刻关注着小美的一举一动。有一天，小美说了一句：“谁来陪我打游戏啊。”

这句话被小王和小李听到了，结果乐坏了，蹭蹭蹭，没一会儿，小王就冲到小美家门口了，在这里，小美是被观察者，小王和小李是观察者，被观察者发出一条信息，然后观察者们进行相应的处理


实际应用场景：

场景描述：

以购票为核心业务(此模式不限于该业务)，但围绕购票会产生不同的其他逻辑，如：

购票后记录文本日志

购票后记录数据库日志

购票后发送短信

购票送抵扣卷、兑换卷、积分
-其他各类活动等

传统解决方案:

在购票逻辑等类内部增加相关代码，完成各种逻辑。

存在问题：

1、一旦某个业务逻辑发生改变，如购票业务中增加其他业务逻辑，需要修改购票核心文件、甚至购票流程。

2、日积月累后，文件冗长，导致后续维护困难。

存在问题原因主要是程序的"紧密耦合"，使用观察模式将目前的业务逻辑优化成"松耦合"，达到易维护、易修改的目的，同时也符合面向接口编程的思想。

观察者模式典型实现方式：

定义2个接口：观察者（通知）接口、被观察者（主题）接口

定义2个类，观察者对象实现观察者接口、主题类实现被观者接口

主题类注册自己需要通知的观察者

主题类某个业务逻辑发生时通知观察者对象，每个观察者执行自己的业务逻辑。